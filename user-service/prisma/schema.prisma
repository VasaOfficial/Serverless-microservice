// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            Int      @id @default(autoincrement())
  firebaseUid        String
  email              String    @unique
  first_name         String?
  last_name          String?
  profile_pic        String?
  verification_code  Int?
  expiry             DateTime?
  verified           Boolean   @default(false)
  created_at         DateTime  @default(now())
  address            Address[]
  shoppingCarts      ShoppingCart[]
  stripe_id          String?
  payment_id         String?
  paymentMethods   PaymentMethod[]
}

model Address {
  id            Int       @id @default(autoincrement())
  user_id       Int
  address_line1 String?
  address_line2 String?
  city          String?
  post_code     Int?
  country       String?
  created_at    DateTime  @default(now())

  user          User      @relation(fields: [user_id], references: [user_id])

  @@index([city])
  @@index([post_code])
  @@index([country])
}

model ShoppingCart {
  cart_id    Int       @id @default(autoincrement())
  user_id    Int
  created_at DateTime  @default(now())

  user       User      @relation(fields: [user_id], references: [user_id])
  cartItems  CartItem[]

  @@index([user_id])
}

model CartItem {
  item_id    Int       @id @default(autoincrement())
  cart_id    Int
  product_id String
  name       String
  price      Int
  image_url  String
  item_qty   Int
  created_at DateTime  @default(now())

  shoppingCart ShoppingCart @relation(fields: [cart_id], references: [cart_id])

  @@index([product_id])
}

model PaymentMethod {
  id            BigInt        @id @default(autoincrement())
  user_id       Int
  bank_account  BigInt?
  swift_code    String?
  payment_type  String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  user          User       @relation(fields: [user_id], references: [user_id])

  @@index([bank_account])
  @@index([user_id])
  @@index([payment_type])
}