# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: vasaa
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: user-service

# "service" is the name of this project. This will also be added to your AWS resource names.
service: dev

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-central-1

# cors:
#   origins:
#     - http://localhost:3000
#   headers:
#     - 'Content-Type'
#     - 'X-Custom-Header'
#     - 'Access-Control-Allow-Origin'
#     - 'Authorization'
#   allowCredentials: true
#   methods:
#     - GET
#     - POST
#     - OPTIONS

functions:
  #User Section
  signup:
    handler: app/handler.SignUp
    timeout: 30
    events:
      - httpApi:
          path: /user/signup
          method: post

  # validateToken:
  #   handler: app/handler.ValidateToken
  #   timeout: 30
  #   events:
  #     - httpApi:
  #         path: /user/validate
  #         method: post

  # oAuth:
  #   handler: app/handler.OAuthentication
  #   timeout: 30
  #   events:
  #     - httpApi:
  #         path: /user/oauth
  #         method: post

  # Favorites Section

  # addFavorites:
  #   handler: app/handler.AddFavorites
  #   timeout: 30
  #   events:
  #     - httpApi:
  #         path: /user/favorites
  #         method: post

  # getFavorites:
  #   handler: app/handler.GetFavorites
  #   timeout: 30
  #   events:
  #     - httpApi:
  #         path: /user/favorites
  #         method: get

  # deleteFavorites:
  #   handler: app/handler.DeleteFavorites
  #   timeout: 30
  #   events:
  #     - httpApi:
  #         path: /user/favorites
  #         method: delete

  # Cart Section

  # getCart:
  #   handler: app/handler.getCart
  #   timeout: 30
  #   events:
  #     - httpApi:
  #         path: /user/cart
  #         method: get

  # addToCart:
  #   handler: app/handler.addToCart
  #   timeout: 30
  #   events:
  #     - httpApi:
  #         path: /user/cart/{productId}
  #         method: post

  # removeFromCart:
  #   handler: app/handler.removeFromCart
  #   timeout: 30
  #   events:
  #     - httpApi:
  #         path: /user/cart/{productId}
  #         method: delete

  # updateCart:
  #   handler: app/handler.updateCart
  #   timeout: 30
  #   events:
  #     - httpApi:
  #         path: /user/cart/{productId}
  #         method:put

build:
  esbuild:
    bundle: true
    minify: false
    external:
      - '@aws-sdk/client-s3'
    exclude:
      - '@aws-sdk/*'
      - '!@aws-sdk/client-bedrock-runtime'
    packages: external
    buildConcurrency: 3
    sourcemap:
      type: linked
      setNodeOptions: true

package:
  individually: true
