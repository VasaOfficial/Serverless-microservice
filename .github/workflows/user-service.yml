name: Build and Deploy

on:
  push:
    paths:
      - 'user-service/**'
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./user-service

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: user-service/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('user-service/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('user-service/package-lock.json') }}

      - name: Install Dependencies
        run: npm install --omit=dev

      - name: Install TypeScript
        run: npm install typescript --save-dev

      - name: Compile TypeScript
        run: npx tsc

      - name: Zip Lambda build
        run: zip -r lambda-build.zip dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./user-service/terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Print directory structure
        run: |
          pwd
          ls -la
          ls -la user-service
          ls -la user-service/terraform

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Upload Lambda to S3
        run: aws s3 cp user-service/lambda-build.zip s3://user-service-s3-bucket/lambda-build.zip

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Initialize
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        env:
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_TYPE: ${{ secrets.FIREBASE_TYPE }}
          FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
          FIREBASE_AUTH_URI: ${{ secrets.FIREBASE_AUTH_URI }}
          FIREBASE_TOKEN_URI: ${{ secrets.FIREBASE_TOKEN_URI }}
          FIREBASE_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.FIREBASE_AUTH_PROVIDER_X509_CERT_URL }}
          FIREBASE_CLIENT_X509_CERT_URL: ${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}
        run: terraform apply -auto-approve
        working-directory: ./user-service/terraform