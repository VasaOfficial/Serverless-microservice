name: Build and Deploy

on:
  push:
    paths:
      - 'user-service/**'
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./user-service

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: user-service/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('user-service/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('user-service/package-lock.json') }}

      - name: Install Dependencies
        run: npm install --omit=dev

      - name: Install TypeScript
        run: npm install typescript --save-dev

      - name: Compile TypeScript
        run: npx tsc

      - name: Zip Lambda build
        run: zip -r lambda-build.zip dist

      - name: List Directory Contents (Debug)
        run: ls -la

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-build
          path: lambda-build.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./user-service/terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-build
          path: ../user-service

      - name: List Directory Contents (Debug)
        run: |
          echo "Current Directory:"
          pwd
          echo "Contents of current directory:"
          ls -la
          echo "Contents of parent directory:"
          ls -la ../
          echo "Contents of downloaded artifact directory:"
          ls -la ../user-service

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Create varibales.tf file
        run: |
          cat <<EOF > variables.tf
          variable "firebase_api_key" {
            default = "${{ secrets.FIREBASE_API_KEY }}"
            type = string
          }

          variable "firebase_auth_domain" {
            default = "${{ secrets.FIREBASE_AUTH_DOMAIN }}"
            type = string
          }

          variable "firebase_project_id" {
            default = "${{ secrets.FIREBASE_PROJECT_ID }}"
            type = string
          }

          variable "firebase_storage_bucket" {
            default = "${{ secrets.FIREBASE_STORAGE_BUCKET }}"
            type = string
          }

          variable "firebase_messaging_sender_id" {
            default = "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}"
            type = string
          }

          variable "firebase_app_id" {
            default = "${{ secrets.FIREBASE_APP_ID }}"
            type = string
          }

          variable "firebase_type" {
            default = "${{ secrets.FIREBASE_TYPE }}"
            type = string
          }

          variable "firebase_private_key_id" {
            default = "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}"
            type = string
          }

          variable "firebase_private_key" {
            default = "${{ secrets.FIREBASE_PRIVATE_KEY }}"
            type = string
          }

          variable "firebase_client_email" {
            default = "${{ secrets.FIREBASE_CLIENT_EMAIL }}"
            type = string
          }

          variable "firebase_client_id" {
            default = "${{ secrets.FIREBASE_CLIENT_ID }}"
            type = string
          }

          variable "firebase_auth_uri" {
            default = "${{ secrets.FIREBASE_AUTH_URI }}"
            type = string
          }

          variable "firebase_token_uri" {
            default = "${{ secrets.FIREBASE_TOKEN_URI }}"
            type = string
          }

          variable "firebase_auth_provider_x509_cert_url" {
            default = "${{ secrets.FIREBASE_AUTH_PROVIDER_X509_CERT_URL }}"
            type = string
          }

          variable "firebase_client_x509_cert_url" {
            default = "${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}"
            type = string
          }
          EOF

      - name: Terraform Initialize
        run: terraform init

      - name: Terraform Format
        run: terraform fmt

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve